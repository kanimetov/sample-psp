-- Oracle DDL (baseline)

CREATE TABLE qr_tx (
  id                   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  psp_transaction_id   VARCHAR2(50) NOT NULL,
  operator_tx_id       VARCHAR2(64),
  status               NUMBER(3) NOT NULL,
  amount               NUMBER(13) NOT NULL,
  commission           NUMBER(13),
  currency             CHAR(3) DEFAULT '417' NOT NULL CHECK (currency = '417'),
  merchant_provider    VARCHAR2(64),
  qr_tx_id             VARCHAR2(32),
  qr_link_hash         CHAR(4),
  transaction_type     VARCHAR2(4),
  request_hash         VARCHAR2(128),
  request_started_at   TIMESTAMP WITH TIME ZONE,
  request_finished_at  TIMESTAMP WITH TIME ZONE,
  last_error_code      NUMBER(3),
  last_error_message   VARCHAR2(512),
  last_error_at        TIMESTAMP WITH TIME ZONE,
  created_at           TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
  updated_at           TIMESTAMP WITH TIME ZONE
);

CREATE UNIQUE INDEX uq_qr_tx_psp_tx ON qr_tx(psp_transaction_id);
CREATE INDEX ix_qr_tx_operator_tx ON qr_tx(operator_tx_id);
CREATE INDEX ix_qr_tx_mp_qrid ON qr_tx(merchant_provider, qr_tx_id);

-- Updated/finish time indexes (optional based on queries)
-- CREATE INDEX ix_qr_tx_req_times ON qr_tx(request_started_at, request_finished_at);

CREATE TABLE qr_tx_audit (
  id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tx_id        NUMBER NOT NULL,
  direction    VARCHAR2(8) CHECK (direction IN ('REQ','RESP')) NOT NULL,
  stage        VARCHAR2(16) CHECK (stage IN ('CHECK','CREATE','EXECUTE','UPDATE','GET')) NOT NULL,
  payload_json CLOB,
  created_at   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT fk_qr_tx_audit_tx FOREIGN KEY (tx_id) REFERENCES qr_tx(id)
);


CREATE TABLE outbox_events (
  id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type         VARCHAR2(64) NOT NULL,
  payload_json CLOB NOT NULL,
  status       VARCHAR2(16) CHECK (status IN ('NEW','SENT','FAILED')) NOT NULL,
  attempts     NUMBER DEFAULT 0 NOT NULL,
  next_run_at  TIMESTAMP WITH TIME ZONE,
  created_at   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

-- Partitioning note: implement interval partitioning on qr_tx.created_at if available.

-- Immutability and updated_at trigger
CREATE OR REPLACE TRIGGER qr_tx_bu_immutable
BEFORE UPDATE ON qr_tx
FOR EACH ROW
BEGIN
  :NEW.updated_at := SYSTIMESTAMP;

  IF NVL(:NEW.psp_transaction_id, '§') <> NVL(:OLD.psp_transaction_id, '§') THEN
    RAISE_APPLICATION_ERROR(-20001, 'psp_transaction_id is immutable');
  END IF;
  IF NVL(:NEW.amount, -1) <> NVL(:OLD.amount, -1) THEN
    RAISE_APPLICATION_ERROR(-20002, 'amount is immutable');
  END IF;
  IF NVL(:NEW.currency, '§') <> NVL(:OLD.currency, '§') THEN
    RAISE_APPLICATION_ERROR(-20003, 'currency is immutable');
  END IF;
  IF NVL(:NEW.merchant_provider, '§') <> NVL(:OLD.merchant_provider, '§') THEN
    RAISE_APPLICATION_ERROR(-20004, 'merchant_provider is immutable');
  END IF;
  IF NVL(:NEW.qr_tx_id, '§') <> NVL(:OLD.qr_tx_id, '§') THEN
    RAISE_APPLICATION_ERROR(-20005, 'qr_tx_id is immutable');
  END IF;
  IF NVL(:NEW.qr_link_hash, '§') <> NVL(:OLD.qr_link_hash, '§') THEN
    RAISE_APPLICATION_ERROR(-20006, 'qr_link_hash is immutable');
  END IF;
  IF NVL(:NEW.transaction_type, '§') <> NVL(:OLD.transaction_type, '§') THEN
    RAISE_APPLICATION_ERROR(-20007, 'transaction_type is immutable');
  END IF;
END;
/


